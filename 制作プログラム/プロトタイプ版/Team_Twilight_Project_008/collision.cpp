//==============================================================================
//
// 当たり判定管理〔collision.cpp〕
// Author : Mare Horiai
//
//==============================================================================
#include "main.h"
#include "renderer.h"
#include "manager.h"
#include "collision.h"
#include "shadow.h" 

//==============================================================================
// コンストラクタ
//==============================================================================
CCollision::CCollision()
{

}

//==============================================================================
// デストラクタ
//==============================================================================
CCollision::~CCollision()
{

}

//==============================================================================
// 当たり判定ポインタの生成
//==============================================================================
CCollision *CCollision::Create(void)
{
	// 当たり判定
	CCollision *pCollision;
	pCollision = new CCollision;

	pCollision->SetCollisionBool(false);

	return pCollision;
}

//==============================================================================
// 3Dモデル間の当たり判定処理
//==============================================================================
bool CCollision::Collision3D(CPlayer *pPlayer, CModel *pObject)
{
	// ローカル変数宣言
	D3DXVECTOR3 aVec[COLLISION_NUM];				// 矩形頂点から判定対象へのベクトル
	
	// プレイヤー情報
	D3DXVECTOR3 posPlayer = pPlayer->GetPosition();	// 判定対象の位置
	D3DXVECTOR3 posOld = pPlayer->GetPosOld();		// プレイヤーの過去の位置
	float fRadius = pPlayer->GetRadius();			// プレイヤー半径の取得
	float fHeight = pPlayer->GetHeight();			// プレイヤー高さの取得
	D3DXVECTOR3 move = pPlayer->GetMove();			// プレイヤーの移動力

	// オブジェクト情報
	D3DXVECTOR3 posObject = pObject->GetPosition();	// オブジェクトの位置
	D3DXVECTOR3 vtxMin = pObject->GetVtxMin();		// オブジェクト6方の最小値
	D3DXVECTOR3 vtxMax = pObject->GetVtxMax();		// オブジェクト6方の最大値

	float fPlayerVec[COLLISION_NUM];				// プレイヤーへのベクトル数値

	m_bOnObject = false;
	m_bUnderObject = false;
	m_bCollision = false;

	// オブジェクトとの当たり判定
	for (int nCnt = 0; nCnt < COLLISION_NUM; nCnt++)
	{
		// ローカル変数宣言
		D3DXVECTOR3 posVtx = pObject->GetPosVtx(nCnt);
		D3DXVECTOR3 vecVtx = pObject->GetVecVtx(nCnt);

		if (nCnt == 0)
		{// 左面
			aVec[nCnt] = posPlayer + D3DXVECTOR3(fRadius, 0.0f, 0.0f) - posVtx;
		}
		else if (nCnt == 1)
		{// 奥側
			aVec[nCnt] = posPlayer + D3DXVECTOR3(0.0f, 0.0f, -fRadius) - posVtx;
		}
		else if (nCnt == 2)
		{// 右面
			aVec[nCnt] = posPlayer + D3DXVECTOR3(-fRadius, 0.0f, 0.0f) - posVtx;
		}
		else if (nCnt == 3)
		{// 手前
			aVec[nCnt] = posPlayer + D3DXVECTOR3(0.0f, 0.0f, fRadius) - posVtx;
		}

		// 数値が「+」の時、当たり判定が有効
		fPlayerVec[nCnt] = (vecVtx.z * aVec[nCnt].x) - (vecVtx.x * aVec[nCnt].z);
	}

	// 当たり判定
	if (fPlayerVec[0] > 0.0f && fPlayerVec[1] > 0.0f && fPlayerVec[2] > 0.0f && fPlayerVec[3] > 0.0f)
	{// 算出したベクトルの範囲内判定
		if (posPlayer.y >= posObject.y + vtxMax.y)
		{
			m_bOnObject = true;
		}
		else if (posOld.y + fHeight < posObject.y + vtxMin.y)
		{
			m_bUnderObject = true;
		}
		
		if (posPlayer.y <= (posObject.y + vtxMax.y) &&
			posPlayer.y > posObject.y + vtxMin.y - fHeight)
		{
			if (posPlayer.y <= posObject.y + vtxMax.y && posOld.y >= posObject.y + vtxMax.y)
			{// 上側
				if (posPlayer.y < posObject.y + vtxMax.y)
				{
					m_bCollision = true;
				}

				// 位置の反映
				posPlayer.y = posObject.y + vtxMax.y;
			}

			else if (posPlayer.y + fHeight > posObject.y + vtxMin.y && posOld.y < posObject.y + vtxMin.y && m_bUnderObject == true)
			{// 下側
				posPlayer.y = posObject.y + vtxMin.y - fHeight;
				pPlayer->SetMove(D3DXVECTOR3(move.x, -move.y / 2.0f, move.z));
			}

			else if (posPlayer.x > posOld.x && posOld.x < posObject.x + vtxMin.x)
			{// 左側
				posPlayer.x = posObject.x + vtxMin.x - fRadius;
				pPlayer->SetDashCnt(0);
			}
			else if (posPlayer.x < posOld.x && posOld.x > posObject.x + vtxMax.x)
			{// 右側
				posPlayer.x = posObject.x + vtxMax.x + fRadius;
				pPlayer->SetDashCnt(0);
			}
			else if (posPlayer.z <= posOld.z && posPlayer.z > posObject.z)
			{// 奥側
				posPlayer.z = posObject.z + vtxMax.z + fRadius;
				pPlayer->SetDashCnt(0);
			}
			else if (posPlayer.z >= posOld.z && posPlayer.z < posObject.z)
			{// 手前
				posPlayer.z = posObject.z + vtxMin.z - fRadius;
				pPlayer->SetDashCnt(0);
			}
		}

		// 位置の反映
		pPlayer->SetPosition(posPlayer);
	}
	else
	{
		if (posPlayer.y <= (posObject.y + vtxMax.y) && posOld.y >= posObject.y + vtxMax.y)
		{// 乗っていた所から落ちる場合
			pPlayer->SetLanding(false);
		}
	}

	return m_bCollision;
}