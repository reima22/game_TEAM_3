
//==============================================================================
//
// チュートリアルモード処理〔tutorial.cpp〕
// Author : Mare Horiai
//
//==============================================================================
#include "main.h"
#include "scene2D.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "gamepad.h"
#include "tutorial.h"
#include "bg.h" 
#include "fade.h"
#include "tutorial_page.h"
#include "sound.h"

// 静的メンバ変数宣言
CTutorialPage *CTutorial::m_pTutorialPage = NULL;

//==============================================================================
// コンストラクタ
//==============================================================================
CTutorial::CTutorial(int nPriority) : CMode(nPriority)
{

}

//==============================================================================
// デストラクタ
//==============================================================================
CTutorial::~CTutorial()
{
}

//==============================================================================
// タイトル画面の初期化処理
//==============================================================================
HRESULT CTutorial::Init(void)
{
	// チュートリアルページの生成
	m_pTutorialPage = CTutorialPage::Create(SCREEN_CENTER);

	//// BGM再生
	//if (CManager::GetBGMPlay(CSound::BGMTYPE_TUTORIAL) == true)
	//{
	//	CSound::Play(CSound::SOUND_LABEL_BGM006);
	//}
	return S_OK;
}

//==============================================================================
// タイトル画面の終了処理
//==============================================================================
void CTutorial::Uninit(void)
{
	// BGMの停止
	//CSound::Stop();

	// チュートリアルページの破棄
	if (m_pTutorialPage != NULL)
	{
		m_pTutorialPage->Uninit();
		m_pTutorialPage = NULL;
	}

	Release();	// インスタンスのデリート
}

//==============================================================================
// タイトル画面の更新処理
//==============================================================================
void CTutorial::Update(void)
{
	// フェード情報の取得
	CFade *pFade;
	pFade = CManager::GetFade();
	CFade::FADE fade = pFade->GetFade();

	// キーボードの取得
	CInputKeyboard *keyboard = CManager::GetInputKeyboard();

	// ゲームパッドの取得
	CGamepad *gamepad = CManager::GetInputGamepad();

	int nPageCnt = m_pTutorialPage->GetPageCnt();

	if (keyboard->GetTrigger(CInput::KEYINFO_OK) == true || gamepad->GetTrigger(CInput::KEYINFO_OK) == true)
	{
		if (fade == CFade::FADE_NONE && nPageCnt <= 0)
		{
			CSound::Play(CSound::SOUND_LABEL_SE_DECIDE);			// サウンド再生
			pFade->SetFade(CFade::FADE_OUT, CMode::MODE_GAME);	// シーン遷移
		}
		else if (fade == CFade::FADE_IN)
		{
			// フェードインのカット
			pFade->FadeInCancel();
		}
	}
}

//==============================================================================
// タイトル画面の描画処理
//==============================================================================
void CTutorial::Draw(void)
{

}

//==============================================================================
// タイトルモード生成処理
//==============================================================================
CTutorial *CTutorial::Create()
{
	// インスタンス生成
	CTutorial *pTutorial;
	pTutorial = new CTutorial;

	// 初期化
	pTutorial->Init();

	return pTutorial;
}